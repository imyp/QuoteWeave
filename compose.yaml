services:
  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
  prestart:
      image: backend
      build:
        context: ./backend
      networks:
        - default
      depends_on:
        db:
          condition: service_healthy
          restart: true
      command: bash prestart.sh
      env_file:
        - .env
      environment:
        - PGDATA=/var/lib/postgresql/data/pgdata
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
        - POSTGRES_USER=${POSTGRES_USER?Variable not set}
        - POSTGRES_DB=${POSTGRES_DB?Variable not set}
        - POSTGRES_SERVER=db
  backend:
      image: backend
      restart: always
      networks:
        - default
      depends_on:
        db:
          condition: service_healthy
          restart: true
        prestart:
          condition: service_completed_successfully
      env_file:
        - .env
      environment:
        - POSTGRES_SERVER=db
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      build:
        context: ./backend
      ports:
        - "8000:8000"
volumes:
  app-db-data:

